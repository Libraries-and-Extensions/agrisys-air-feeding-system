@using AgrisysAirFeedingSystem.Models.DBModels
@model EventListViewModel

@{
	ViewBag.Title = "Event Log";
	Layout = "_Layout";
}

<h1>@ViewBag.Title</h1>

<form id="eventFilter" asp-action="Index" method="get" class="d-flex gap-3">
  <select asp-for="Level" name="level" class="form-select w-auto ms-auto" aria-label="Default select example">
    <option selected value="">All</option>
    @foreach (var val in Enum.GetValues(typeof(EditLevel)))
    {
      <option>@val.ToString()</option>
    }
  </select>
  <button type="submit" class="btn btn-primary">submit</button>
</form>

<table class="table" id="eventTable" hub-name="/EventsHub">
  <thead>
  <tr>
    <th scope="col">Timestamp</th>
    <th scope="col">Event Level</th>
    <th scope="col">Entity Name</th>
    <th scope="col">Description</th>
  </tr>
  </thead>
  <tbody id="tableBody">
  <partial name="IndexPartial" model="@Model.Events"/>
  </tbody>
</table>
<form id="loadMore" asp-action="IndexPartial">
  <input hidden name="fetchCount" type="number" value="10"/>
  <input hidden name="offset" type="number" value="@Model.Events.Count()"/>
  <button class="btn btn-primary" type="submit">load more</button>
</form>

@section Scripts
{
  <!--suppress JSCheckFunctionSignatures -->
<script type="text/javascript">
    let formLoadMore = document.getElementById("loadMore");
    let offsetInput = formLoadMore.querySelector("#loadMore > input[name='offset']");
    
    formLoadMore.addEventListener("submit",(e)=>{
      e.preventDefault();
      let formData = new FormData(formLoadMore);
      let url = formLoadMore.getAttribute("action");
      let method = formLoadMore.getAttribute("method");
     
      url += "?" + new URLSearchParams(formData).toString();
      
      fetch(url,{
        method: method,
        body: formData
      }).then(response => response.text())
        .then(text => {
          tableBody.innerHTML += text;
          offsetInput.setAttribute("value",tableBody.children.length);
        })
    });
      
  </script>
  <script type="text/javascript">
    let levelCSS = [
      "",
      "text-warning",
      "text-danger"
    ]
    
    let levelOptions = [
       "Info",
       "Warning",
       "Error"
    ]
    
    let eventTable = document.getElementById("eventTable");
    let tableBody = eventTable.children[1]

    function simpleCreateElement(tag,value){
        let element = document.createElement(tag)
            
        element.innerText = value;
        return element
    }
    
    eventTable.addEventListener("valueUpdate",evt => {
         console.log(evt)
      
      let root = document.createElement("tr")
      root.classList.add(levelCSS[evt.detail.level]);
 
       let numbering = simpleCreateElement("th",evt.detail.timeStamp);
       numbering.setAttribute("scope","row");
      
      root.appendChild(numbering);
      root.appendChild(simpleCreateElement("td",levelOptions[evt.detail.level]));
      root.appendChild(simpleCreateElement("td",evt.detail.entityName));
      root.appendChild(simpleCreateElement("td",evt.detail.formatted));
      
      tableBody.insertBefore(root, tableBody.firstChild);
      
      if (tableBody.children.length > 100) {
        tableBody.removeChild(tableBody.lastChild);
      }
    })
  </script>
  @{ await Html.RenderPartialAsync("_LiveUpdateScripts"); }

}
